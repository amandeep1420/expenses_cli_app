#! /usr/bin/env ruby

require 'pg'
require 'io/console'

class CLI
  def initialize
    @application = ExpenseData.new
  end
  
  def run(arguments)
    case arguments.first
    when "list"  then @application.list_expenses
    when "clear"
      puts "This will remove all expenses. Are you sure? (y/n)"
      input = $stdin.getch
      @application.delete_all_expenses if input == 'y'
    when "search"
      term = arguments[1]
      @application.search_expenses(term)
    when "add"
      amount = arguments[1]
      memo   = arguments[2]
      abort "You must provide an amount and memo." unless amount && memo
      @application.add_expense(amount, memo)
    when "delete"
      id = arguments[1]
      @application.delete_expense(id)
    else              display_help
    end
  end
  
  def display_help
    puts <<~HEREDOC
      An expense recording system
    
      Commands:
      
      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HEREDOC
  end
end

class ExpenseData
  attr_reader :connection
  
  def initialize
    @connection = PG.connect(dbname: "expenses")
    setup_schema
  end
  
  def add_expense(amount, memo)
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES($1, $2, NOW());"
    param_array = [amount, memo]
    connection.exec_params(sql, param_array)
  end
  
  def delete_all_expenses
    connection.exec("DELETE FROM expenses")
    puts "All expenses have been deleted."
  end
  
  def delete_expense(id)
    sql    = 'SELECT * FROM expenses WHERE id = $1'
    result = connection.exec_params(sql, [id])
    
    if result.ntuples == 1
      sql = 'DELETE FROM expenses WHERE id = $1'
      connection.exec_params(sql, [id])
      
      puts "The following expense has been deleted:"
      display_expenses(result)
    else
      abort "There is no expense with the id '#{id}'"
    end
  end
  
  def display_count(expenses)
    count = expenses.ntuples
    if count > 0
      puts "There are #{count} expenses."
    else
      puts "There are no expenses."
    end
  end
  
  def display_expenses(expenses)
    expenses.each do |tuple|
      columns = [ 
                  tuple["id"].rjust(3),
                  tuple["created_on"].rjust(10),
                  tuple["amount"].rjust(12),
                  tuple["memo"]
                ]
                
      puts columns.join(" | ")
    end
    puts "-" * 50
    
    total = expenses.field_values("amount").map(&:to_f).inject(:+)
    puts "Total #{total.to_s.rjust(25)}"
  end
  
  def list_expenses
    result = connection.exec ("SELECT * FROM expenses ORDER BY created_on ASC")
    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end
  
  def search_expenses(term)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    result = @connection.exec_params(sql, ["%#{term}%"])
    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end
  
  def setup_schema
    sql = "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'expenses'"
    count = connection.exec(sql)
    return if count == 1
    sql = "
end

CLI.new.run(ARGV)

















































































=begin

Original solution for Assignment #8, below

result = expense_db.exec("SELECT id, created_on, amount, memo 
FROM expenses
ORDER BY created_on");

result.each_row do |row|
  puts "#{row[0]} | #{row[1]} | #{row[2].rjust(10)} | #{row[3]}"
end
=end


